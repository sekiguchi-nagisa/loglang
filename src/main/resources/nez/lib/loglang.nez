// syntax definition of Loglang
// written by Nez

// lexical rule
EOF = !.

W = [0-9a-zA-Z_]+

IDENTIFIER = [a-zA-Z_][0-9a-zA-Z_]*

STATE   = 'state'   !W
VAR     = 'var'     !W
TRUE    = 'true'    !W
FALSE   = 'false'   !W
PRINT   = 'print'   !W
ASSERT  = 'assert'  !W


KEYWORD = STATE
        / VAR
        / TRUE
        / FALSE
        / PRINT
        / ASSERT

_ = ([ \t\r\n] / COMMENT)*

WS = ([ \t] / COMMENT)*

COMMENT = '//' (![\r\n] .)*

LINE_END
    = WS (EOF / [\r\n] / ';')

File
    = { _ @PatternDefinition _ @PrefixDefinition  _ @MatchStatement _ #Root }

PATTERN_BEGIN
    = '[[' WS '\n'

PATTERN_END
    = ']]' WS '\n'

// peg definition
PatternDefinition
    = PATTERN_BEGIN {  (_ @RuleExpr)+ _ #PatternDefinition } PATTERN_END

RuleExpr
    = { @{ IDENTIFIER #Name } @TypeAnnotation _ '=' _ @ParsingExpression #RuleExpr }

TypeAnnotation
    = _ ':' _ { IDENTIFIER #Name }
    / {#Empty}

ParsingExpression
    = ChoiceExpr

ChoiceExpr
    = SequenceExpr {@ _ '/' _ @SequenceExpr #ChoiceExpr }*

SequenceExpr
    = LabeledExpr {@ _ @LabeledExpr #SequenceExpr }*

LabeledExpr
    = {'$' @{ IDENTIFIER #Name } _ ':' _ @PrefixExpr  #LabeledExpr }
    / PrefixExpr

PrefixExpr
    = { ('&' #AndExpr / '!' #NotExpr ) _ @SuffixExpr }
    / SuffixExpr

SuffixExpr
    = PrimaryExpr {@ _ ('*' #ZeroMoreExpr / '+' #OneMoreExpr / '?' #OptionalExpr) }*

PrimaryExpr
    = '(' _ ParsingExpression _ ')'
    / { IDENTIFIER !(_ [:=<]) #NonTerminalExpr }
    / { '.' #AnyExpr }
    / { '\''  ('\\\'' / '\\\\' / !['\n\r] .)*  '\'' #StringExpr }
    / Charset

Charset
       = { '[' (@({ CHAR #Class } ({@ '-' @({ CHAR #Class }) #List })?))* ']'  #CharClassExpr }

CHAR
    = '\\u' HEX HEX HEX HEX
    / '\\x' HEX HEX
    / '\\n'
    / '\\t'
    / '\\\\'
    / '\\r'
    / '\\v'
    / '\\f'
    / '\\-'
    / '\\]'
    / !(']') .

HEX
    = [0-9A-Fa-f]


// language definition
PrefixDefinition
    = '%' _  { @ParsingExpression #PrefixDefinition }  _ '%'
    / { #PrefixDefinition }

MatchStatement
    = { ( _ @CaseStatement)+ #Match }

CaseStatement
    = { @ParsingExpression @CaseBlock #CaseStatement }

CaseBlock
    = _ { '{' _ @StateDefinitions _ @Statements _ '}' #CaseBlock } _

StateDefinitions
    = { ( _ @StateDefinition)* #States }

StateDefinition
    = { STATE _ @Variable _ '=' _ @Expression LINE_END  #State }

Statements
    = { ( _ @Statement LINE_END)* #Statements }

Statement
    = VarDecl / PrintStatement / AssertStatement / Expression

PrintStatement
    = { PRINT _ @Expression #Print }

AssertStatement
    = { ASSERT _ @Expression (_ ':' _ @Expression)? #Assert }

VarDecl
    = { VAR _ @Variable _ '=' _ @Expression #VarDecl }

Expression
    = FloatLiteral / IntegerLiteral / BoolLiteral / StringLiteral / Variable

NUM = '0' / [1-9][0-9]*

IntegerLiteral
    = { NUM #Integer }

FLOAT_SUFFIX
    = [eE] [+-]? NUM

FloatLiteral
    = { NUM '.' [0-9]+ FLOAT_SUFFIX? #Float }

BoolLiteral
    = { TRUE #True / FALSE #False }

StringLiteral
    = { '"'  ('\\' [trn\\"] / ![\t\r\n\\"] . )* '"' #String }
    / { '\'' ('\\' [trn\\'] / ![\t\r\n\\'] . )* '\'' #String }

Variable
    = { !KEYWORD IDENTIFIER #Variable }
